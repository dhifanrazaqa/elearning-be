// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(uuid())
  name       String
  email      String        @unique
  password   String
  role       String // "siswa" or "guru"
  classes    ClassOnUser[]
  Submission Submission[]
  teaches    Class[]
}

model Class {
  id          String        @id @default(uuid())
  name        String
  description String?
  teacherId   String
  teach       User          @relation(fields: [teacherId], references: [id])
  students    ClassOnUser[]
  contents    Content[]
  assignments Assignment[]
}

model ClassOnUser {
  id      String @id @default(uuid())
  userId  String
  classId String

  user  User  @relation(fields: [userId], references: [id])
  class Class @relation(fields: [classId], references: [id])

  @@unique([userId, classId]) // Unique pair to avoid duplicates
}

model Content {
  id      String @id @default(uuid())
  title   String
  body    String
  classId String
  class   Class  @relation(fields: [classId], references: [id])
}

model Assignment {
  id          String       @id @default(uuid())
  title       String
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  submissions Submission[]
}

model Submission {
  id           String @id @default(uuid())
  studentId    String
  assignmentId String
  grade        Int?

  student    User       @relation(fields: [studentId], references: [id])
  assignment Assignment @relation(fields: [assignmentId], references: [id])
}
